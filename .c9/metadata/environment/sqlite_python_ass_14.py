{"changed":true,"filter":false,"title":"sqlite_python_ass_14.py","tooltip":"/sqlite_python_ass_14.py","value":"def write_data(sql_query):\n\timport sqlite3\n\tconnection = sqlite3.connect(\"students.sqlite3\")\n\tcrsr = connection.cursor() \n\tcrsr.execute(\"PRAGMA foreign_keys=on;\") \n\tcrsr.execute(sql_query) \n\tconnection.commit() \n\tconnection.close()\n\ndef read_data(sql_query):\n\timport sqlite3\n\tconnection = sqlite3.connect(\"students.sqlite3\")\n\tcrsr = connection.cursor() \n\tcrsr.execute(sql_query) \n\tans= crsr.fetchall()  \n\tconnection.close() \n\treturn ans\n\n\nclass InvalidField(Exception):\n    pass\n\n\nclass Student:\n    def __init__(self, name, age, score):\n        self.name = name\n        self.student_id = None\n        self.age = age\n        self.score = score\n\n    @classmethod\n    def aggregation(cls,attr = None,field = \"\",**kwargs):\n           \n        list = ['name','age','score','student_id','']\n        if field not in list:\n            raise InvalidField\n        \n        if(len(kwargs) == 0):\n            if field in ['age','score','student_id','name']:\n                data = read_data('''select {}({}) from student'''.format(attr,field))\n                return data[0][0]\n                \n            else :\n                raise InvalidField\n                \n        else :\n            keys_li = []\n            mc = kwargs\n            for k,v in kwargs.items():\n                keys_li.append(k)\n                \n                \n            if(len(keys_li) == 1):\n                \n                for k,v in kwargs.items():\n                    key = (k.split('__'))\n                    value = v\n                    print(key,value)\n                    \n                    if len(key) == 1:\n                        if key[0] in ['student_id','age','score']:\n                            data = read_data('''select {}({}) from Student where {} = {}'''.format(attr,field,key[0],v))\n                        \n                        elif key[0] == 'name':\n                            data = read_data('''select {}({}) from Student where {} like '%{}%' '''.format(attr,field,key[0],v))\n                    \n                        else : \n                            raise InvalidField\n                    \n                    elif len(key) >= 1:\n                 \n                        if field in ['age','score','student_id'] :  \n                            if key[1] == 'lt':\n                                if key[0] in ['age','score','student_id']:\n                                    data = read_data('''select {}({}) from Student where {} < {}'''.format(attr,field,key[0],v))\n                                \n                                else : \n                                    raise InvalidField\n                                            \n                                        \n                            elif key[1] == 'gt':\n                                if key[0] in ['age','score','student_id']:\n                                    data = read_data('''select {}({}) from Student where {} > {}'''.format(attr,field,key[0],v))\n        \n                                else :\n                                    raise InvalidField\n                                                    \n                            elif key[1] == 'lte':\n                                if key[0] in ['age','score','student_id']:\n                                    data = read_data('''select {}({}) from Student where {} <= {}'''.format(attr,field,key[0],v))\n                                    \n                                else :\n                                    raise InvalidField\n                                                    \n                            elif key[1] == 'gte':\n                                if key[0] in ['age','score','student_id']:\n                                    data = read_data('''select {}({}) from Student where {} >= {}'''.format(attr,field,key[0],v))\n                                \n                                else :\n                                    raise InvalidField\n                                        \n                            elif key[1] == 'in':\n                                if key[0] in ['name','age','score','student_id']:\n                                    data = read_data('''select {}({}) from Student where {} in {}'''.format(attr,field,key[0],tuple(v)))\n                                    \n                                else :\n                                    raise InvalidField\n                                \n                            elif key[1] == 'neq':\n                                if key[0] in ['age','score','student_id']:\n                                    data = read_data('''select {}({}) from Student where {} <> {}'''.format(attr,field,key[0],v))\n                                    \n                                        \n                                elif key[0] == 'name':\n                                    data = read_data('''select {}({}) from Student where {} <> '{}' '''.format(attr,field,key[0],v))\n                                    \n                                    \n                                else :\n                                    raise InvalidField\n                                \n                                        \n                            elif key[1] == 'contains' :\n                                \n                                if key[0] == 'name':\n                                    data = read_data('''select {}({}) from Student where {} like '%{}%' '''.format(attr,field,key[0],v))\n                                \n                                else :\n                                    raise InvalidField\n                            \n                            return data[0][0]            \n                                    \n                                \n                else :\n                        \n                    symboles = {'lt':'<','gt':'>','lte':'<=','gte':'>=','eq':'='}\n                    joining = []\n                    for i in range(len(keys_li)):\n                        k = keys_li[i].split('__')\n                        if k[1] in ['lt','gt','lte','gte'] :\n                            sql = '{} {} {}'.format(k[0],symboles[k[1]],mc[keys_li[i]])\n                            joining.append(sql)\n                                        \n                            l = (' and '.join(joining))\n                                        \n                                        \n                    data = read_data('''select {}({}) from student where {}'''.format(attr,field,l))\n                        #print(data[0][0])\n                    return(data[0][0])\n                \n                \n            \n            else :\n                        \n                symboles = {'lt':'<','gt':'>','lte':'<=','gte':'>=','eq':'='}\n                joining = []\n                for i in range(len(keys_li)):\n                    k = keys_li[i].split('__')\n                    if k[1] in ['lt','gt','lte','gte'] :\n                        sql = '{} {} {}'.format(k[0],symboles[k[1]],mc[keys_li[i]])\n                        joining.append(sql)\n                                        \n                        l = (' and '.join(joining))\n                                        \n                                        \n                data = read_data('''select {}({}) from student where {}'''.format(attr,field,l))\n                        #print(data[0][0])\n                return(data[0][0])\n                \n                                        \n                        \n    @classmethod\n    def avg(cls,field,**kwargs):\n        return cls.aggregation('AVG',field,**kwargs)\n                                \n                                \n    @classmethod\n    def sum(cls,field,**kwargs):\n        return cls.aggregation('SUM',field,**kwargs)\n    \n    @classmethod\n    def count(cls,field=\"\",**kwargs):\n        return cls.aggregation('COUNT',field,**kwargs)\n    \n    @classmethod\n    def min(cls,field,**kwargs):\n        return cls.aggregation('MIN',field,**kwargs)\n    \n    @classmethod\n    def max(cls,field,**kwargs):\n        return cls.aggregation('MAX',field,**kwargs)\n \n        \n'''      \navg_age = Student.avg('age',age__gt = 18)\nprint(avg_age)'''\n\n'''\navg_age = Student.avg('age', age__gt=18, age__lt=21)\nprint(avg_age)'''\n\n'''\nmin_age = Student.min('age', age__gt=18)\nprint(min_age)\n\nsum_of_age = Student.sum('age', score__gt=30)\nprint(sum_of_age)'''\n\n'''\nsum_of_age = Student.sum('age', score__gt=30, age__lt=30)\nprint(sum_of_age)\n\n\ncount = Student.count('age', score__gt=30, age__lt=30)\nprint(count)'''\n\n\ncount = Student.count()\nprint(count)\n\n\n\n\n\n\ndef write_data(sql_query):\n\timport sqlite3\n\tconnection = sqlite3.connect(\"selected_students.sqlite3\")\n\tcrsr = connection.cursor() \n\tcrsr.execute(\"PRAGMA foreign_keys=on;\") \n\tcrsr.execute(sql_query) \n\tconnection.commit() \n\tconnection.close()\n\ndef read_data(sql_query):\n\timport sqlite3\n\tconnection = sqlite3.connect(\"selected_students.sqlite3\")\n\tcrsr = connection.cursor() \n\tcrsr.execute(sql_query) \n\tans= crsr.fetchall()  \n\tconnection.close() \n\treturn ans\n\n\nclass DoesNotExist(Exception):\n    pass\n\nclass MultipleObjectsReturned(Exception):\n    pass\n\nclass InvalidField(Exception):\n    pass\n\n\n\nclass Student:\n    def __init__(self, student_id = None,name = None, age = None, score = None):\n        self.name = name\n        self.student_id = student_id\n        self.age = age\n        self.score = score\n        \n    def __repr__(self):\n    \n            return \"Student(student_id={0}, name={1}, age={2}, score={3})\".format(\n                self.student_id,\n                self.name,\n                self.age,\n                self.score)\n        \n        \n    \n    \n    \n    \n    @classmethod    \n    def get(cls,**kwargs):\n        \n        for k,v in kwargs.items():\n            \n            if 'score'== k :\n                data = read_data('''select * from student where score = {}''' . format(v))\n            \n            elif 'name' == k :\n                data = read_data('''select * from student where name like '%{}%' ''' . format(v))\n                \n            elif 'age'== k :\n                data = read_data('''select * from student where age = {}''' . format(v))\n            \n            elif 'student_id' == k :\n                data = read_data('''select * from student where student_id = {}''' . format(v))\n                \n            \n            else : \n                raise InvalidField\n                \n            \n                \n            if len(data) > 1:\n                raise MultipleObjectsReturned\n                \n            elif len(data) == 0:\n                raise DoesNotExist\n            \n            else :\n                \n    \n                obj = Student(*data[0])\n                return (obj)\n                \n                \n                \n    def delete(self):\n        write_data('''delete from student where student_id = {}'''.format(self.student_id))\n         \n         \n    def save(self):\n        \n            import sqlite3\n            conn = sqlite3.connect(\"selected_students.sqlite3\")\n            c = conn.cursor()\n            if(self.student_id == None):\n                c.execute('''insert into student(name,age,score) values (?,?,?)''',(self.name,self.age,self.score))\n                self.student_id = c.lastrowid\n            else :\n               c.execute('''insert or REPLACE into student(student_id,name,age,score) values (?,?,?,?)''',(self.student_id ,self.name,self.age,self.score))       \n            conn.commit()\n            conn.close()\n    \n    @classmethod    \n    def filter(cls,**kwargs):\n        keys_li = []\n        mc = kwargs\n        for k,v in kwargs.items():\n            keys_li.append(k)\n        \n        if(len(keys_li) == 1):    \n            for k,v in kwargs.items():\n                key = (k.split('__'))\n                value = v\n                \n                \n                if key[0] in ['student_id','age','score','name']:\n                    pass\n                else :\n                    raise InvalidField\n                           \n                if len(key) == 1:\n                    if key[0] in ['student_id','age','score']:\n                        data = read_data('''select * from Student where {} = {}'''.format(key[0],v))\n                        \n                    elif key[0] == 'name':\n                        data = read_data('''select * from Student where {} like '%{}%' '''.format(key[0],v))\n                    \n                    else : \n                        raise InvalidField\n                \n                elif(len(key) > 1):        \n                    \n                    if key[1] == 'lt':\n                        if key[0] in ['age','score','student_id']:\n                            data = read_data('''select * from Student where {} < {}'''.format(key[0],v))\n                        \n                        \n                    elif key[1] == 'gt':\n                        if key[0] in ['age','score','student_id']:\n                            data = read_data('''select * from Student where {} > {}'''.format(key[0],v))\n                            \n                    elif key[1] == 'lte':\n                        if key[0] in ['age','score','student_id']:\n                            data = read_data('''select * from Student where {} <= {}'''.format(key[0],v))\n                            \n                    elif key[1] == 'gte':\n                        if key[0] in ['age','score','student_id']:\n                            data = read_data('''select * from Student where {} >= {}'''.format(key[0],v))\n                        \n                    elif key[1] == 'in':\n                        if key[0] in ['name','age','score','student_id']:\n                            data = read_data('''select * from Student where {} in {}'''.format(key[0],tuple(v)))\n                        \n                        \n                    elif key[1] == 'neq':\n                        if key[0] in ['age','score','student_id']:\n                            data = read_data('''select * from Student where {} <> {}'''.format(key[0],v))\n                            \n                        elif key[0] == 'name':\n                            data = read_data('''select * from Student where {} <> '{}' '''.format(key[0],v))\n                        \n                    elif key[1] == 'contains' :\n                        if key[0] == 'name':\n                            data = read_data('''select * from Student where {} like '%{}%' '''.format(key[0],v))\n                       \n                        \n                            \n                lis = []\n                print(len(data))\n                if len(data) != 0:\n                    for row in range(len(data)):\n                        lis.append(Student(*data[row]))\n                else:\n                    return []\n                                \n            return lis\n        \n        else:\n            symboles = {'lt':'<','gt':'>','lte':'<=','gte':'>='}\n            joining = []\n            for i in range(len(keys_li)):\n                k = keys_li[i].split('__')\n                if k[1] in ['lt','gt','lte','gte'] :\n                    sql = '{} {} {}'.format(k[0],symboles[k[1]],mc[keys_li[i]])\n                    \n                    print(sql)\n                    joining.append(sql)\n                    \n                    l = (' and '.join(joining))\n                    \n                    data = read_data('''select * from student where {}'''.format(l))\n                    \n                else :\n                        \n                    lis = []\n                    print(len(data))\n                    if len(data) != 0:\n                        for row in range(len(data)):\n                            lis.append(Student(*data[row]))\n                    else:\n                        return []\n                                        \n            return lis\n                                \n                            \n                \n                    \n                \n                \n      \n                    \n                \n                    \n           \n            \n            \n                \n            \n       \nselected_students = Student.filter(age__gt = 25)\nprint(selected_students)   \n            \n'''        \nselected_students = Student.filter(age__neq=34)\nprint(selected_students)'''\n'''\nselected_students = Student.filter(age=23)\nprint(selected_students)\nprint(Student.filter(age=100))'''\n\n\n\n","undoManager":{"mark":-2,"position":7,"stack":[[{"start":{"row":0,"column":0},"end":{"row":263,"column":17},"action":"insert","lines":["def write_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\tcrsr.execute(sql_query) ","\tconnection.commit() ","\tconnection.close()","","def read_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(sql_query) ","\tans= crsr.fetchall()  ","\tconnection.close() ","\treturn ans","","","class InvalidField(Exception):","    pass","","","class Student:","    def __init__(self, name, age, score):","        self.name = name","        self.student_id = None","        self.age = age","        self.score = score","","","    def aggregation(f,**kargs):","        pass","    @classmethod","    def avg(cls,field,**kwargs):","        if(len(kwargs) == 0):","            if field in ['age','score','student_id']:","                data = read_data('''select avg({}) from student'''.format(field))","                return data[0][0]","                ","            else :","                raise InvalidField","                ","        else :","            keys_li = []","            mc = kwargs","            for k,v in kwargs.items():","                keys_li.append(k)","                ","                ","            if(len(keys_li) == 1):    ","                for k,v in kwargs.items():","                    key = (k.split('__'))","                    value = v","                    print(key,value)","                    ","                    if field in ['age','score','student_id'] :  ","                        if key[1] == 'lt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select avg({}) from Student where {} < {}'''.format(field,key[0],v))","                                return data[0][0]    ","                                ","                        elif key[1] == 'gt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select avg({}) from Student where {} > {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'lte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select avg({}) from Student where {} <= {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'gte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select avg({}) from Student where {} >= {}'''.format(field,key[0],v))","                                return data[0][0]","                                ","                                ","    @classmethod","    def sum(cls,field,**kwargs):","        if(len(kwargs) == 0):","            if field in ['age','score','student_id']:","                data = read_data('''select sum({}) from student'''.format(field))","                return data[0][0]","                ","            else :","                raise InvalidField","                ","        else :","            keys_li = []","            mc = kwargs","            for k,v in kwargs.items():","                keys_li.append(k)","                ","                ","            if(len(keys_li) == 1):    ","                for k,v in kwargs.items():","                    key = (k.split('__'))","                    value = v","                    print(key,value)","                    ","                    if field in ['age','score','student_id'] :  ","                        if key[1] == 'lt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select sum({}) from Student where {} < {}'''.format(field,key[0],v))","                                return data[0][0]    ","                                ","                        elif key[1] == 'gt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select sum({}) from Student where {} > {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'lte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select sum({}) from Student where {} <= {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'gte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select sum({}) from Student where {} >= {}'''.format(field,key[0],v))","                                return data[0][0]","    ","    ","    ","    @classmethod","    def count(cls,field,**kwargs):","        if(len(kwargs) == 0):","            if field in ['age','score','student_id']:","                data = read_data('''select count({}) from student'''.format(field))","                return data[0][0]","                ","            else :","                raise InvalidField","                ","        else :","            keys_li = []","            mc = kwargs","            for k,v in kwargs.items():","                keys_li.append(k)","                ","                ","            if(len(keys_li) == 1):    ","                for k,v in kwargs.items():","                    key = (k.split('__'))","                    value = v","                    print(key,value)","                    ","                    if field in ['age','score','student_id'] :  ","                        if key[1] == 'lt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select count({}) from Student where {} < {}'''.format(field,key[0],v))","                                return data[0][0]    ","                                ","                        elif key[1] == 'gt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select count({}) from Student where {} > {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'lte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select count({}) from Student where {} <= {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'gte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select count({}) from Student where {} >= {}'''.format(field,key[0],v))","                                return data[0][0] ","                                ","    @classmethod","    def min(cls,field,**kwargs):","        if(len(kwargs) == 0):","            if field in ['age','score','student_id']:","                data = read_data('''select min({}) from student'''.format(field))","                return data[0][0]","                ","            else :","                raise InvalidField","                ","        else :","            keys_li = []","            mc = kwargs","            for k,v in kwargs.items():","                keys_li.append(k)","                ","                ","            if(len(keys_li) == 1):    ","                for k,v in kwargs.items():","                    key = (k.split('__'))","                    value = v","                    print(key,value)","                    ","                    if field in ['age','score','student_id'] :  ","                        if key[1] == 'lt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select min({}) from Student where {} < {}'''.format(field,key[0],v))","                                return data[0][0]    ","                                ","                        elif key[1] == 'gt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select min({}) from Student where {} > {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'lte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select min({}) from Student where {} <= {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'gte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select min({}) from Student where {} >= {}'''.format(field,key[0],v))","                                return data[0][0]","    ","    ","    @classmethod","    def max(cls,field,**kwargs):","        if(len(kwargs) == 0):","            if field in ['age','score','student_id']:","                data = read_data('''select max({}) from student'''.format(field))","                return data[0][0]","                ","            else :","                raise InvalidField","                ","        else :","            keys_li = []","            mc = kwargs","            for k,v in kwargs.items():","                keys_li.append(k)","                ","                ","            if(len(keys_li) == 1):    ","                for k,v in kwargs.items():","                    key = (k.split('__'))","                    value = v","                    print(key,value)","                    ","                    if field in ['age','score','student_id'] :  ","                        if key[1] == 'lt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select max({}) from Student where {} < {}'''.format(field,key[0],v))","                                return data[0][0]    ","                                ","                        elif key[1] == 'gt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select max({}) from Student where {} > {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'lte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select max({}) from Student where {} <= {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'gte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select max({}) from Student where {} >= {}'''.format(field,key[0],v))","                                return data[0][0]            ","            ","                    ","    "," ","         ","'''         ","avg_age = Student.avg('age',age__gt = 18)","print(avg_age)'''"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":263,"column":17},"action":"remove","lines":["def write_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\tcrsr.execute(sql_query) ","\tconnection.commit() ","\tconnection.close()","","def read_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(sql_query) ","\tans= crsr.fetchall()  ","\tconnection.close() ","\treturn ans","","","class InvalidField(Exception):","    pass","","","class Student:","    def __init__(self, name, age, score):","        self.name = name","        self.student_id = None","        self.age = age","        self.score = score","","","    def aggregation(f,**kargs):","        pass","    @classmethod","    def avg(cls,field,**kwargs):","        if(len(kwargs) == 0):","            if field in ['age','score','student_id']:","                data = read_data('''select avg({}) from student'''.format(field))","                return data[0][0]","                ","            else :","                raise InvalidField","                ","        else :","            keys_li = []","            mc = kwargs","            for k,v in kwargs.items():","                keys_li.append(k)","                ","                ","            if(len(keys_li) == 1):    ","                for k,v in kwargs.items():","                    key = (k.split('__'))","                    value = v","                    print(key,value)","                    ","                    if field in ['age','score','student_id'] :  ","                        if key[1] == 'lt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select avg({}) from Student where {} < {}'''.format(field,key[0],v))","                                return data[0][0]    ","                                ","                        elif key[1] == 'gt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select avg({}) from Student where {} > {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'lte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select avg({}) from Student where {} <= {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'gte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select avg({}) from Student where {} >= {}'''.format(field,key[0],v))","                                return data[0][0]","                                ","                                ","    @classmethod","    def sum(cls,field,**kwargs):","        if(len(kwargs) == 0):","            if field in ['age','score','student_id']:","                data = read_data('''select sum({}) from student'''.format(field))","                return data[0][0]","                ","            else :","                raise InvalidField","                ","        else :","            keys_li = []","            mc = kwargs","            for k,v in kwargs.items():","                keys_li.append(k)","                ","                ","            if(len(keys_li) == 1):    ","                for k,v in kwargs.items():","                    key = (k.split('__'))","                    value = v","                    print(key,value)","                    ","                    if field in ['age','score','student_id'] :  ","                        if key[1] == 'lt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select sum({}) from Student where {} < {}'''.format(field,key[0],v))","                                return data[0][0]    ","                                ","                        elif key[1] == 'gt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select sum({}) from Student where {} > {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'lte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select sum({}) from Student where {} <= {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'gte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select sum({}) from Student where {} >= {}'''.format(field,key[0],v))","                                return data[0][0]","    ","    ","    ","    @classmethod","    def count(cls,field,**kwargs):","        if(len(kwargs) == 0):","            if field in ['age','score','student_id']:","                data = read_data('''select count({}) from student'''.format(field))","                return data[0][0]","                ","            else :","                raise InvalidField","                ","        else :","            keys_li = []","            mc = kwargs","            for k,v in kwargs.items():","                keys_li.append(k)","                ","                ","            if(len(keys_li) == 1):    ","                for k,v in kwargs.items():","                    key = (k.split('__'))","                    value = v","                    print(key,value)","                    ","                    if field in ['age','score','student_id'] :  ","                        if key[1] == 'lt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select count({}) from Student where {} < {}'''.format(field,key[0],v))","                                return data[0][0]    ","                                ","                        elif key[1] == 'gt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select count({}) from Student where {} > {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'lte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select count({}) from Student where {} <= {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'gte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select count({}) from Student where {} >= {}'''.format(field,key[0],v))","                                return data[0][0] ","                                ","    @classmethod","    def min(cls,field,**kwargs):","        if(len(kwargs) == 0):","            if field in ['age','score','student_id']:","                data = read_data('''select min({}) from student'''.format(field))","                return data[0][0]","                ","            else :","                raise InvalidField","                ","        else :","            keys_li = []","            mc = kwargs","            for k,v in kwargs.items():","                keys_li.append(k)","                ","                ","            if(len(keys_li) == 1):    ","                for k,v in kwargs.items():","                    key = (k.split('__'))","                    value = v","                    print(key,value)","                    ","                    if field in ['age','score','student_id'] :  ","                        if key[1] == 'lt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select min({}) from Student where {} < {}'''.format(field,key[0],v))","                                return data[0][0]    ","                                ","                        elif key[1] == 'gt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select min({}) from Student where {} > {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'lte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select min({}) from Student where {} <= {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'gte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select min({}) from Student where {} >= {}'''.format(field,key[0],v))","                                return data[0][0]","    ","    ","    @classmethod","    def max(cls,field,**kwargs):","        if(len(kwargs) == 0):","            if field in ['age','score','student_id']:","                data = read_data('''select max({}) from student'''.format(field))","                return data[0][0]","                ","            else :","                raise InvalidField","                ","        else :","            keys_li = []","            mc = kwargs","            for k,v in kwargs.items():","                keys_li.append(k)","                ","                ","            if(len(keys_li) == 1):    ","                for k,v in kwargs.items():","                    key = (k.split('__'))","                    value = v","                    print(key,value)","                    ","                    if field in ['age','score','student_id'] :  ","                        if key[1] == 'lt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select max({}) from Student where {} < {}'''.format(field,key[0],v))","                                return data[0][0]    ","                                ","                        elif key[1] == 'gt':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select max({}) from Student where {} > {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'lte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select max({}) from Student where {} <= {}'''.format(field,key[0],v))","                                return data[0][0]","                                            ","                        elif key[1] == 'gte':","                            if key[0] in ['age','score','student_id']:","                                data = read_data('''select max({}) from Student where {} >= {}'''.format(field,key[0],v))","                                return data[0][0]            ","            ","                    ","    "," ","         ","'''         ","avg_age = Student.avg('age',age__gt = 18)","print(avg_age)'''"],"id":2},{"start":{"row":0,"column":0},"end":{"row":218,"column":0},"action":"insert","lines":["def write_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\tcrsr.execute(sql_query) ","\tconnection.commit() ","\tconnection.close()","","def read_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(sql_query) ","\tans= crsr.fetchall()  ","\tconnection.close() ","\treturn ans","","","class InvalidField(Exception):","    pass","","","class Student:","    def __init__(self, name, age, score):","        self.name = name","        self.student_id = None","        self.age = age","        self.score = score","","    @classmethod","    def aggregation(cls,attr = None,field = \"\",**kwargs):","           ","        list = ['name','age','score','student_id','']","        if field not in list:","            raise InvalidField","        ","        if(len(kwargs) == 0):","            if field in ['age','score','student_id','name']:","                data = read_data('''select {}({}) from student'''.format(attr,field))","                return data[0][0]","                ","            else :","                raise InvalidField","                ","        else :","            keys_li = []","            mc = kwargs","            for k,v in kwargs.items():","                keys_li.append(k)","                ","                ","            if(len(keys_li) == 1):","                ","                for k,v in kwargs.items():","                    key = (k.split('__'))","                    value = v","                    print(key,value)","                    ","                    if len(key) == 1:","                        if key[0] in ['student_id','age','score']:","                            data = read_data('''select {}({}) from Student where {} = {}'''.format(attr,field,key[0],v))","                        ","                        elif key[0] == 'name':","                            data = read_data('''select {}({}) from Student where {} like '%{}%' '''.format(attr,field,key[0],v))","                    ","                        else : ","                            raise InvalidField","                    ","                    elif len(key) >= 1:","                 ","                        if field in ['age','score','student_id'] :  ","                            if key[1] == 'lt':","                                if key[0] in ['age','score','student_id']:","                                    data = read_data('''select {}({}) from Student where {} < {}'''.format(attr,field,key[0],v))","                                ","                                else : ","                                    raise InvalidField","                                            ","                                        ","                            elif key[1] == 'gt':","                                if key[0] in ['age','score','student_id']:","                                    data = read_data('''select {}({}) from Student where {} > {}'''.format(attr,field,key[0],v))","        ","                                else :","                                    raise InvalidField","                                                    ","                            elif key[1] == 'lte':","                                if key[0] in ['age','score','student_id']:","                                    data = read_data('''select {}({}) from Student where {} <= {}'''.format(attr,field,key[0],v))","                                    ","                                else :","                                    raise InvalidField","                                                    ","                            elif key[1] == 'gte':","                                if key[0] in ['age','score','student_id']:","                                    data = read_data('''select {}({}) from Student where {} >= {}'''.format(attr,field,key[0],v))","                                ","                                else :","                                    raise InvalidField","                                        ","                            elif key[1] == 'in':","                                if key[0] in ['name','age','score','student_id']:","                                    data = read_data('''select {}({}) from Student where {} in {}'''.format(attr,field,key[0],tuple(v)))","                                    ","                                else :","                                    raise InvalidField","                                ","                            elif key[1] == 'neq':","                                if key[0] in ['age','score','student_id']:","                                    data = read_data('''select {}({}) from Student where {} <> {}'''.format(attr,field,key[0],v))","                                    ","                                        ","                                elif key[0] == 'name':","                                    data = read_data('''select {}({}) from Student where {} <> '{}' '''.format(attr,field,key[0],v))","                                    ","                                    ","                                else :","                                    raise InvalidField","                                ","                                        ","                            elif key[1] == 'contains' :","                                ","                                if key[0] == 'name':","                                    data = read_data('''select {}({}) from Student where {} like '%{}%' '''.format(attr,field,key[0],v))","                                ","                                else :","                                    raise InvalidField","                            ","                            return data[0][0]            ","                                    ","                                ","                else :","                        ","                    symboles = {'lt':'<','gt':'>','lte':'<=','gte':'>=','eq':'='}","                    joining = []","                    for i in range(len(keys_li)):","                        k = keys_li[i].split('__')","                        if k[1] in ['lt','gt','lte','gte'] :","                            sql = '{} {} {}'.format(k[0],symboles[k[1]],mc[keys_li[i]])","                            joining.append(sql)","                                        ","                            l = (' and '.join(joining))","                                        ","                                        ","                    data = read_data('''select {}({}) from student where {}'''.format(attr,field,l))","                        #print(data[0][0])","                    return(data[0][0])","                ","                ","            ","            else :","                        ","                symboles = {'lt':'<','gt':'>','lte':'<=','gte':'>=','eq':'='}","                joining = []","                for i in range(len(keys_li)):","                    k = keys_li[i].split('__')","                    if k[1] in ['lt','gt','lte','gte'] :","                        sql = '{} {} {}'.format(k[0],symboles[k[1]],mc[keys_li[i]])","                        joining.append(sql)","                                        ","                        l = (' and '.join(joining))","                                        ","                                        ","                data = read_data('''select {}({}) from student where {}'''.format(attr,field,l))","                        #print(data[0][0])","                return(data[0][0])","                ","                                        ","                        ","    @classmethod","    def avg(cls,field,**kwargs):","        return cls.aggregation('AVG',field,**kwargs)","                                ","                                ","    @classmethod","    def sum(cls,field,**kwargs):","        return cls.aggregation('SUM',field,**kwargs)","    ","    @classmethod","    def count(cls,field=\"\",**kwargs):","        return cls.aggregation('COUNT',field,**kwargs)","    ","    @classmethod","    def min(cls,field,**kwargs):","        return cls.aggregation('MIN',field,**kwargs)","    ","    @classmethod","    def max(cls,field,**kwargs):","        return cls.aggregation('MAX',field,**kwargs)"," ","        ","'''      ","avg_age = Student.avg('age',age__gt = 18)","print(avg_age)'''","","'''","avg_age = Student.avg('age', age__gt=18, age__lt=21)","print(avg_age)'''","","'''","min_age = Student.min('age', age__gt=18)","print(min_age)","","sum_of_age = Student.sum('age', score__gt=30)","print(sum_of_age)'''","","'''","sum_of_age = Student.sum('age', score__gt=30, age__lt=30)","print(sum_of_age)","","","count = Student.count('age', score__gt=30, age__lt=30)","print(count)'''","","","count = Student.count()","print(count)",""]}],[{"start":{"row":218,"column":0},"end":{"row":219,"column":0},"action":"insert","lines":["",""],"id":3},{"start":{"row":219,"column":0},"end":{"row":220,"column":0},"action":"insert","lines":["",""]},{"start":{"row":220,"column":0},"end":{"row":221,"column":0},"action":"insert","lines":["",""]},{"start":{"row":221,"column":0},"end":{"row":222,"column":0},"action":"insert","lines":["",""]},{"start":{"row":222,"column":0},"end":{"row":223,"column":0},"action":"insert","lines":["",""]},{"start":{"row":223,"column":0},"end":{"row":224,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":224,"column":0},"end":{"row":458,"column":0},"action":"insert","lines":["def write_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\tcrsr.execute(sql_query) ","\tconnection.commit() ","\tconnection.close()","","def read_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(sql_query) ","\tans= crsr.fetchall()  ","\tconnection.close() ","\treturn ans","","","class DoesNotExist(Exception):","    pass","","class MultipleObjectsReturned(Exception):","    pass","","class InvalidField(Exception):","    pass","","","","class Student:","    def __init__(self, student_id = None,name = None, age = None, score = None):","        self.name = name","        self.student_id = student_id","        self.age = age","        self.score = score","        ","    def __repr__(self):","    ","            return \"Student(student_id={0}, name={1}, age={2}, score={3})\".format(","                self.student_id,","                self.name,","                self.age,","                self.score)","        ","        ","    ","    ","    ","    ","    @classmethod    ","    def get(cls,**kwargs):","        ","        for k,v in kwargs.items():","            ","            if 'score'== k :","                data = read_data('''select * from student where score = {}''' . format(v))","            ","            elif 'name' == k :","                data = read_data('''select * from student where name like '%{}%' ''' . format(v))","                ","            elif 'age'== k :","                data = read_data('''select * from student where age = {}''' . format(v))","            ","            elif 'student_id' == k :","                data = read_data('''select * from student where student_id = {}''' . format(v))","                ","            ","            else : ","                raise InvalidField","                ","            ","                ","            if len(data) > 1:","                raise MultipleObjectsReturned","                ","            elif len(data) == 0:","                raise DoesNotExist","            ","            else :","                ","    ","                obj = Student(*data[0])","                return (obj)","                ","                ","                ","    def delete(self):","        write_data('''delete from student where student_id = {}'''.format(self.student_id))","         ","         ","    def save(self):","        ","            import sqlite3","            conn = sqlite3.connect(\"selected_students.sqlite3\")","            c = conn.cursor()","            if(self.student_id == None):","                c.execute('''insert into student(name,age,score) values (?,?,?)''',(self.name,self.age,self.score))","                self.student_id = c.lastrowid","            else :","               c.execute('''insert or REPLACE into student(student_id,name,age,score) values (?,?,?,?)''',(self.student_id ,self.name,self.age,self.score))       ","            conn.commit()","            conn.close()","    ","    ","    @classmethod    ","    def filter(cls,**kwargs):","        keys_li = []","        mc = kwargs","        for k,v in kwargs.items():","            keys_li.append(k)","        ","        if(len(keys_li) == 1):    ","            for k,v in kwargs.items():","                key = (k.split('__'))","                value = v","                ","                ","                if key[0] in ['student_id','age','score','name']:","                    pass","                else :","                    raise InvalidField","                           ","                if len(key) == 1:","                    if key[0] in ['student_id','age','score']:","                        data = read_data('''select * from Student where {} = {}'''.format(key[0],v))","                        ","                    elif key[0] == 'name':","                        data = read_data('''select * from Student where {} like '%{}%' '''.format(key[0],v))","                    ","                    else : ","                        raise InvalidField","                ","                elif(len(key) > 1):        ","                    ","                    if key[1] == 'lt':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} < {}'''.format(key[0],v))","                        ","                        ","                    elif key[1] == 'gt':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} > {}'''.format(key[0],v))","                            ","                    elif key[1] == 'lte':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} <= {}'''.format(key[0],v))","                            ","                    elif key[1] == 'gte':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} >= {}'''.format(key[0],v))","                        ","                    elif key[1] == 'in':","                        if key[0] in ['name','age','score','student_id']:","                            data = read_data('''select * from Student where {} in {}'''.format(key[0],tuple(v)))","                        ","                        ","                    elif key[1] == 'neq':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} <> {}'''.format(key[0],v))","                            ","                        elif key[0] == 'name':","                            data = read_data('''select * from Student where {} <> '{}' '''.format(key[0],v))","                        ","                    elif key[1] == 'contains' :","                        if key[0] == 'name':","                            data = read_data('''select * from Student where {} like '%{}%' '''.format(key[0],v))","                       ","                        ","                            ","                lis = []","                print(len(data))","                if len(data) != 0:","                    for row in range(len(data)):","                        lis.append(Student(*data[row]))","                else:","                    return []","                                ","            return lis","        ","        else:","            symboles = {'lt':'<','gt':'>','lte':'<=','gte':'>='}","            joining = []","            for i in range(len(keys_li)):","                k = keys_li[i].split('__')","                if k[1] in ['lt','gt','lte','gte'] :","                    sql = '{} {} {}'.format(k[0],symboles[k[1]],mc[keys_li[i]])","                    ","                    print(sql)","                    joining.append(sql)","                    ","                    l = (' and '.join(joining))","                    ","                    data = read_data('''select * from student where {}'''.format(l))","                    ","                else :","                        ","                    lis = []","                    print(len(data))","                    if len(data) != 0:","                        for row in range(len(data)):","                            lis.append(Student(*data[row]))","                    else:","                        return []","                                        ","            return lis","                                ","                            ","                ","                    ","                ","                ","                    ","                ","                    ","           ","            ","            ","                ","            ","       ","selected_students = Student.filter(age__gt = 25)","print(selected_students)   ","            ","'''        ","selected_students = Student.filter(age__neq=34)","print(selected_students)'''","'''","selected_students = Student.filter(age=23)","print(selected_students)","print(Student.filter(age=100))'''","","","",""],"id":4}],[{"start":{"row":329,"column":4},"end":{"row":436,"column":4},"action":"remove","lines":["@classmethod    ","    def filter(cls,**kwargs):","        keys_li = []","        mc = kwargs","        for k,v in kwargs.items():","            keys_li.append(k)","        ","        if(len(keys_li) == 1):    ","            for k,v in kwargs.items():","                key = (k.split('__'))","                value = v","                ","                ","                if key[0] in ['student_id','age','score','name']:","                    pass","                else :","                    raise InvalidField","                           ","                if len(key) == 1:","                    if key[0] in ['student_id','age','score']:","                        data = read_data('''select * from Student where {} = {}'''.format(key[0],v))","                        ","                    elif key[0] == 'name':","                        data = read_data('''select * from Student where {} like '%{}%' '''.format(key[0],v))","                    ","                    else : ","                        raise InvalidField","                ","                elif(len(key) > 1):        ","                    ","                    if key[1] == 'lt':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} < {}'''.format(key[0],v))","                        ","                        ","                    elif key[1] == 'gt':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} > {}'''.format(key[0],v))","                            ","                    elif key[1] == 'lte':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} <= {}'''.format(key[0],v))","                            ","                    elif key[1] == 'gte':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} >= {}'''.format(key[0],v))","                        ","                    elif key[1] == 'in':","                        if key[0] in ['name','age','score','student_id']:","                            data = read_data('''select * from Student where {} in {}'''.format(key[0],tuple(v)))","                        ","                        ","                    elif key[1] == 'neq':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} <> {}'''.format(key[0],v))","                            ","                        elif key[0] == 'name':","                            data = read_data('''select * from Student where {} <> '{}' '''.format(key[0],v))","                        ","                    elif key[1] == 'contains' :","                        if key[0] == 'name':","                            data = read_data('''select * from Student where {} like '%{}%' '''.format(key[0],v))","                       ","                        ","                            ","                lis = []","                print(len(data))","                if len(data) != 0:","                    for row in range(len(data)):","                        lis.append(Student(*data[row]))","                else:","                    return []","                                ","            return lis","        ","        else:","            symboles = {'lt':'<','gt':'>','lte':'<=','gte':'>='}","            joining = []","            for i in range(len(keys_li)):","                k = keys_li[i].split('__')","                if k[1] in ['lt','gt','lte','gte'] :","                    sql = '{} {} {}'.format(k[0],symboles[k[1]],mc[keys_li[i]])","                    ","                    print(sql)","                    joining.append(sql)","                    ","                    l = (' and '.join(joining))","                    ","                    data = read_data('''select * from student where {}'''.format(l))","                    ","                else :","                        ","                    lis = []","                    print(len(data))","                    if len(data) != 0:","                        for row in range(len(data)):","                            lis.append(Student(*data[row]))","                    else:","                        return []","                                        ","            return lis","                                ","                            ","                ","                    ","                ","                ","    "],"id":5}],[{"start":{"row":328,"column":2},"end":{"row":435,"column":4},"action":"insert","lines":["@classmethod    ","    def filter(cls,**kwargs):","        keys_li = []","        mc = kwargs","        for k,v in kwargs.items():","            keys_li.append(k)","        ","        if(len(keys_li) == 1):    ","            for k,v in kwargs.items():","                key = (k.split('__'))","                value = v","                ","                ","                if key[0] in ['student_id','age','score','name']:","                    pass","                else :","                    raise InvalidField","                           ","                if len(key) == 1:","                    if key[0] in ['student_id','age','score']:","                        data = read_data('''select * from Student where {} = {}'''.format(key[0],v))","                        ","                    elif key[0] == 'name':","                        data = read_data('''select * from Student where {} like '%{}%' '''.format(key[0],v))","                    ","                    else : ","                        raise InvalidField","                ","                elif(len(key) > 1):        ","                    ","                    if key[1] == 'lt':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} < {}'''.format(key[0],v))","                        ","                        ","                    elif key[1] == 'gt':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} > {}'''.format(key[0],v))","                            ","                    elif key[1] == 'lte':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} <= {}'''.format(key[0],v))","                            ","                    elif key[1] == 'gte':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} >= {}'''.format(key[0],v))","                        ","                    elif key[1] == 'in':","                        if key[0] in ['name','age','score','student_id']:","                            data = read_data('''select * from Student where {} in {}'''.format(key[0],tuple(v)))","                        ","                        ","                    elif key[1] == 'neq':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} <> {}'''.format(key[0],v))","                            ","                        elif key[0] == 'name':","                            data = read_data('''select * from Student where {} <> '{}' '''.format(key[0],v))","                        ","                    elif key[1] == 'contains' :","                        if key[0] == 'name':","                            data = read_data('''select * from Student where {} like '%{}%' '''.format(key[0],v))","                       ","                        ","                            ","                lis = []","                print(len(data))","                if len(data) != 0:","                    for row in range(len(data)):","                        lis.append(Student(*data[row]))","                else:","                    return []","                                ","            return lis","        ","        else:","            symboles = {'lt':'<','gt':'>','lte':'<=','gte':'>='}","            joining = []","            for i in range(len(keys_li)):","                k = keys_li[i].split('__')","                if k[1] in ['lt','gt','lte','gte'] :","                    sql = '{} {} {}'.format(k[0],symboles[k[1]],mc[keys_li[i]])","                    ","                    print(sql)","                    joining.append(sql)","                    ","                    l = (' and '.join(joining))","                    ","                    data = read_data('''select * from student where {}'''.format(l))","                    ","                else :","                        ","                    lis = []","                    print(len(data))","                    if len(data) != 0:","                        for row in range(len(data)):","                            lis.append(Student(*data[row]))","                    else:","                        return []","                                        ","            return lis","                                ","                            ","                ","                    ","                ","                ","    "],"id":6}],[{"start":{"row":224,"column":0},"end":{"row":433,"column":0},"action":"remove","lines":["def write_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\tcrsr.execute(sql_query) ","\tconnection.commit() ","\tconnection.close()","","def read_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(sql_query) ","\tans= crsr.fetchall()  ","\tconnection.close() ","\treturn ans","","","class DoesNotExist(Exception):","    pass","","class MultipleObjectsReturned(Exception):","    pass","","class InvalidField(Exception):","    pass","","","","class Student:","    def __init__(self, student_id = None,name = None, age = None, score = None):","        self.name = name","        self.student_id = student_id","        self.age = age","        self.score = score","        ","    def __repr__(self):","    ","            return \"Student(student_id={0}, name={1}, age={2}, score={3})\".format(","                self.student_id,","                self.name,","                self.age,","                self.score)","        ","        ","    ","    ","    ","    ","    @classmethod    ","    def get(cls,**kwargs):","        ","        for k,v in kwargs.items():","            ","            if 'score'== k :","                data = read_data('''select * from student where score = {}''' . format(v))","            ","            elif 'name' == k :","                data = read_data('''select * from student where name like '%{}%' ''' . format(v))","                ","            elif 'age'== k :","                data = read_data('''select * from student where age = {}''' . format(v))","            ","            elif 'student_id' == k :","                data = read_data('''select * from student where student_id = {}''' . format(v))","                ","            ","            else : ","                raise InvalidField","                ","            ","                ","            if len(data) > 1:","                raise MultipleObjectsReturned","                ","            elif len(data) == 0:","                raise DoesNotExist","            ","            else :","                ","    ","                obj = Student(*data[0])","                return (obj)","                ","                ","                ","    def delete(self):","        write_data('''delete from student where student_id = {}'''.format(self.student_id))","         ","         ","    def save(self):","        ","            import sqlite3","            conn = sqlite3.connect(\"selected_students.sqlite3\")","            c = conn.cursor()","            if(self.student_id == None):","                c.execute('''insert into student(name,age,score) values (?,?,?)''',(self.name,self.age,self.score))","                self.student_id = c.lastrowid","            else :","               c.execute('''insert or REPLACE into student(student_id,name,age,score) values (?,?,?,?)''',(self.student_id ,self.name,self.age,self.score))       ","            conn.commit()","            conn.close()","    ","  @classmethod    ","    def filter(cls,**kwargs):","        keys_li = []","        mc = kwargs","        for k,v in kwargs.items():","            keys_li.append(k)","        ","        if(len(keys_li) == 1):    ","            for k,v in kwargs.items():","                key = (k.split('__'))","                value = v","                ","                ","                if key[0] in ['student_id','age','score','name']:","                    pass","                else :","                    raise InvalidField","                           ","                if len(key) == 1:","                    if key[0] in ['student_id','age','score']:","                        data = read_data('''select * from Student where {} = {}'''.format(key[0],v))","                        ","                    elif key[0] == 'name':","                        data = read_data('''select * from Student where {} like '%{}%' '''.format(key[0],v))","                    ","                    else : ","                        raise InvalidField","                ","                elif(len(key) > 1):        ","                    ","                    if key[1] == 'lt':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} < {}'''.format(key[0],v))","                        ","                        ","                    elif key[1] == 'gt':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} > {}'''.format(key[0],v))","                            ","                    elif key[1] == 'lte':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} <= {}'''.format(key[0],v))","                            ","                    elif key[1] == 'gte':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} >= {}'''.format(key[0],v))","                        ","                    elif key[1] == 'in':","                        if key[0] in ['name','age','score','student_id']:","                            data = read_data('''select * from Student where {} in {}'''.format(key[0],tuple(v)))","                        ","                        ","                    elif key[1] == 'neq':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} <> {}'''.format(key[0],v))","                            ","                        elif key[0] == 'name':","                            data = read_data('''select * from Student where {} <> '{}' '''.format(key[0],v))","                        ","                    elif key[1] == 'contains' :","                        if key[0] == 'name':","                            data = read_data('''select * from Student where {} like '%{}%' '''.format(key[0],v))","                       ","                        ","                            ","                lis = []","                print(len(data))","                if len(data) != 0:","                    for row in range(len(data)):","                        lis.append(Student(*data[row]))","                else:","                    return []","                                ","            return lis","        ","        else:","            symboles = {'lt':'<','gt':'>','lte':'<=','gte':'>='}","            joining = []","            for i in range(len(keys_li)):","                k = keys_li[i].split('__')","                if k[1] in ['lt','gt','lte','gte'] :","                    sql = '{} {} {}'.format(k[0],symboles[k[1]],mc[keys_li[i]])","                    ","                    print(sql)","                    joining.append(sql)","                    ","                    l = (' and '.join(joining))","                    ","                    data = read_data('''select * from student where {}'''.format(l))","                    ","                else :","                        ","                    lis = []","                    print(len(data))","                    if len(data) != 0:","                        for row in range(len(data)):","                            lis.append(Student(*data[row]))","                    else:","                        return []","                                        ","            return lis","                                ","                            ","                ","                    ",""]}],[{"start":{"row":224,"column":0},"end":{"row":433,"column":0},"action":"insert","lines":["def write_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(\"PRAGMA foreign_keys=on;\") ","\tcrsr.execute(sql_query) ","\tconnection.commit() ","\tconnection.close()","","def read_data(sql_query):","\timport sqlite3","\tconnection = sqlite3.connect(\"selected_students.sqlite3\")","\tcrsr = connection.cursor() ","\tcrsr.execute(sql_query) ","\tans= crsr.fetchall()  ","\tconnection.close() ","\treturn ans","","","class DoesNotExist(Exception):","    pass","","class MultipleObjectsReturned(Exception):","    pass","","class InvalidField(Exception):","    pass","","","","class Student:","    def __init__(self, student_id = None,name = None, age = None, score = None):","        self.name = name","        self.student_id = student_id","        self.age = age","        self.score = score","        ","    def __repr__(self):","    ","            return \"Student(student_id={0}, name={1}, age={2}, score={3})\".format(","                self.student_id,","                self.name,","                self.age,","                self.score)","        ","        ","    ","    ","    ","    ","    @classmethod    ","    def get(cls,**kwargs):","        ","        for k,v in kwargs.items():","            ","            if 'score'== k :","                data = read_data('''select * from student where score = {}''' . format(v))","            ","            elif 'name' == k :","                data = read_data('''select * from student where name like '%{}%' ''' . format(v))","                ","            elif 'age'== k :","                data = read_data('''select * from student where age = {}''' . format(v))","            ","            elif 'student_id' == k :","                data = read_data('''select * from student where student_id = {}''' . format(v))","                ","            ","            else : ","                raise InvalidField","                ","            ","                ","            if len(data) > 1:","                raise MultipleObjectsReturned","                ","            elif len(data) == 0:","                raise DoesNotExist","            ","            else :","                ","    ","                obj = Student(*data[0])","                return (obj)","                ","                ","                ","    def delete(self):","        write_data('''delete from student where student_id = {}'''.format(self.student_id))","         ","         ","    def save(self):","        ","            import sqlite3","            conn = sqlite3.connect(\"selected_students.sqlite3\")","            c = conn.cursor()","            if(self.student_id == None):","                c.execute('''insert into student(name,age,score) values (?,?,?)''',(self.name,self.age,self.score))","                self.student_id = c.lastrowid","            else :","               c.execute('''insert or REPLACE into student(student_id,name,age,score) values (?,?,?,?)''',(self.student_id ,self.name,self.age,self.score))       ","            conn.commit()","            conn.close()","    ","    @classmethod    ","    def filter(cls,**kwargs):","        keys_li = []","        mc = kwargs","        for k,v in kwargs.items():","            keys_li.append(k)","        ","        if(len(keys_li) == 1):    ","            for k,v in kwargs.items():","                key = (k.split('__'))","                value = v","                ","                ","                if key[0] in ['student_id','age','score','name']:","                    pass","                else :","                    raise InvalidField","                           ","                if len(key) == 1:","                    if key[0] in ['student_id','age','score']:","                        data = read_data('''select * from Student where {} = {}'''.format(key[0],v))","                        ","                    elif key[0] == 'name':","                        data = read_data('''select * from Student where {} like '%{}%' '''.format(key[0],v))","                    ","                    else : ","                        raise InvalidField","                ","                elif(len(key) > 1):        ","                    ","                    if key[1] == 'lt':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} < {}'''.format(key[0],v))","                        ","                        ","                    elif key[1] == 'gt':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} > {}'''.format(key[0],v))","                            ","                    elif key[1] == 'lte':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} <= {}'''.format(key[0],v))","                            ","                    elif key[1] == 'gte':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} >= {}'''.format(key[0],v))","                        ","                    elif key[1] == 'in':","                        if key[0] in ['name','age','score','student_id']:","                            data = read_data('''select * from Student where {} in {}'''.format(key[0],tuple(v)))","                        ","                        ","                    elif key[1] == 'neq':","                        if key[0] in ['age','score','student_id']:","                            data = read_data('''select * from Student where {} <> {}'''.format(key[0],v))","                            ","                        elif key[0] == 'name':","                            data = read_data('''select * from Student where {} <> '{}' '''.format(key[0],v))","                        ","                    elif key[1] == 'contains' :","                        if key[0] == 'name':","                            data = read_data('''select * from Student where {} like '%{}%' '''.format(key[0],v))","                       ","                        ","                            ","                lis = []","                print(len(data))","                if len(data) != 0:","                    for row in range(len(data)):","                        lis.append(Student(*data[row]))","                else:","                    return []","                                ","            return lis","        ","        else:","            symboles = {'lt':'<','gt':'>','lte':'<=','gte':'>='}","            joining = []","            for i in range(len(keys_li)):","                k = keys_li[i].split('__')","                if k[1] in ['lt','gt','lte','gte'] :","                    sql = '{} {} {}'.format(k[0],symboles[k[1]],mc[keys_li[i]])","                    ","                    print(sql)","                    joining.append(sql)","                    ","                    l = (' and '.join(joining))","                    ","                    data = read_data('''select * from student where {}'''.format(l))","                    ","                else :","                        ","                    lis = []","                    print(len(data))","                    if len(data) != 0:","                        for row in range(len(data)):","                            lis.append(Student(*data[row]))","                    else:","                        return []","                                        ","            return lis","                                ","                            ","                ","                    ",""],"id":8}]]},"ace":{"folds":[],"scrolltop":6497.92824646989,"scrollleft":0,"selection":{"start":{"row":318,"column":58},"end":{"row":318,"column":61},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":381,"state":"start","mode":"ace/mode/python"}},"timestamp":1590572005459}